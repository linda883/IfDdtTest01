{
  "uid" : "ec71b274fd60bb96",
  "name" : "test_eval[7*5-30]",
  "fullName" : "test_param_except#test_eval[7*5-30]",
  "historyId" : "6c2b59ee9aa32df303d9b63c5aee399b",
  "time" : {
    "start" : 1551342398981,
    "stop" : 1551342398982,
    "duration" : 1
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 35 == 30\n  -35\n  +30",
  "statusTrace" : "test_input = '7*5', expected = 30\n\n    @pytest.mark.parametrize(\"test_input,expected\",[(\"3+5\",8),\n                                                    (\"2+5\",7),\n                                                    (\"7*5\",30),\n                                                    ])\n    def test_eval(test_input,expected):\n        # eval将字符串str当成有效的表达式来求值并返回计算结果\n>       assert eval(test_input)==expected\nE       assert 35 == 30\nE         -35\nE         +30\n\ntest_param_except.py:10: AssertionError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError: assert 35 == 30\n  -35\n  +30",
    "statusTrace" : "test_input = '7*5', expected = 30\n\n    @pytest.mark.parametrize(\"test_input,expected\",[(\"3+5\",8),\n                                                    (\"2+5\",7),\n                                                    (\"7*5\",30),\n                                                    ])\n    def test_eval(test_input,expected):\n        # eval将字符串str当成有效的表达式来求值并返回计算结果\n>       assert eval(test_input)==expected\nE       assert 35 == 30\nE         -35\nE         +30\n\ntest_param_except.py:10: AssertionError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "e9d82f4c5372745c",
      "name" : "log",
      "source" : "e9d82f4c5372745c.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "fb3849f080f3c261",
      "name" : "stdout",
      "source" : "fb3849f080f3c261.txt",
      "type" : "text/plain",
      "size" : 0
    }, {
      "uid" : "37964b25352ee9de",
      "name" : "stderr",
      "source" : "37964b25352ee9de.txt",
      "type" : "text/plain",
      "size" : 0
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "suite",
    "value" : "test_param_except"
  }, {
    "name" : "host",
    "value" : "lizdeMacBook-Air.local"
  }, {
    "name" : "thread",
    "value" : "2744-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_param_except"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "expected",
    "value" : "30"
  }, {
    "name" : "test_input",
    "value" : "'7*5'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ec71b274fd60bb96.json",
  "parameterValues" : [ "30", "'7*5'" ]
}